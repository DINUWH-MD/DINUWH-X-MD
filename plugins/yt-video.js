const { cmd } = require('../command');
const { fetchJson } = require('../lib/functions');
const yts = require('yt-search');

const videoInfoAPI = "https://manul-ofc-ytdl-paid-30a8f429a0a6.herokuapp.com/video-info?url=";
const downloadAPI = "https://manul-ofc-ytdl-paid-30a8f429a0a6.herokuapp.com/download/video?url=";

cmd({
    pattern: 'video',
    alias: ["vplay"],
    desc: 'Download YouTube Videos',
    use: '.video <YouTube Title or URL>',
    react: "üìπ",
    category: 'media',
    filename: __filename
}, async (conn, mek, m, { from, q, reply }) => {
    try {
        if (!q) return reply('‚ùå Please provide a valid YouTube title or URL!');

        // Search for YouTube video
        const yt = await yts(q);
        const ytsResult = yt.videos[0];
        if (!ytsResult) return reply('‚ùå *No results found!*');

        const videoUrl = ytsResult.url;
        const videoInfo = await fetchJson(`${videoInfoAPI}${videoUrl}`);
        if (!videoInfo.success) return reply('‚ùå *Failed to fetch video details!*');

        const { title, author, duration, thumbnail, views } = videoInfo;

        let desc = `üé¨ *YouTube Video Details:*\n\nüìå *Title:* ${title}\nüë§ *Author:* ${author}\n‚è≥ *Duration:* ${duration}\nüëÅÔ∏è *Views:* ${views}\nüîó *URL:* ${videoUrl}\n\n> *Select the quality to download!*\n\n1Ô∏è‚É£ *240p*\n2Ô∏è‚É£ *360p*\n3Ô∏è‚É£ *480p*\n4Ô∏è‚É£ *720p*`;

        const vv = await conn.sendMessage(from, { image: { url: thumbnail }, caption: desc }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();
            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                let videoQuality;
                switch (selectedOption) {
                    case '1Ô∏è‚É£': videoQuality = '240p'; break;
                    case '2Ô∏è‚É£': videoQuality = '360p'; break;
                    case '3Ô∏è‚É£': videoQuality = '480p'; break;
                    case '4Ô∏è‚É£': videoQuality = '720p'; break;
                    default: return reply('‚ùå Invalid option! Please select 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, or 4Ô∏è‚É£.');
                }

                const videoLink = `${downloadAPI}${videoUrl}&quality=${videoQuality}`;
                await conn.sendMessage(from, { video: { url: videoLink }, caption: `üì• *Downloading in ${videoQuality}...*` }, { quoted: mek });
            }
        });

    } catch (e) {
        console.error(e);
        reply('‚ùå An error occurred while processing your request.');
    }
});
